to determine-closeness-to-exit ;for all patches with pcolor = red and pcolor one-of neighbours8 = orange
  ask patches with [pcolor != white and pcolor != cyan and pcolor != green and pcolor != red]
  [set closeness-to-exit 6000
   set evac-path? false]
  ask patches with [pcolor = red]
  [
    set evac-path? true
    set closeness-to-exit 0
    ask neighbors with [pcolor = white or pcolor = cyan]
    [set closeness-to-exit 1
     set evac-path? true
     set pcolor 23
    ]
  ]
  
  let counter 1
  while [counter < 180] 
  [
    ask patches with [closeness-to-exit = counter]
    [ask neighbors with [pcolor = white or pcolor = cyan or pcolor = green] 
      [
      if counter + 1 > closeness-to-exit 
        [
        set closeness-to-exit counter + 1
        set pcolor 23
        set evac-path? true
      ]]]
   set counter counter + 1 
  ]
  ask patches with [cyan? = true] [set pcolor cyan]
  ask patches with [white? = true] [set pcolor white]
  ask patches with [green? = true] [set pcolor green] 
  ask patches [ if any? neighbors with [pcolor = black] [set closeness-to-exit closeness-to-exit + 1]]  
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to determine-closeness-to-main-exit
  ask patches with [pcolor != white and pcolor != cyan and pcolor != green and pcolor != red]
  [set closeness-to-main-exit 6000
   set evac-path? false]
  ask patches with [(pxcor = 115  and pycor = 150) or (pxcor = 125  and pycor = 146)]
  [
    set closeness-to-main-exit 0
    ask patches in-radius 20 with [pcolor = red]
    [set closeness-to-main-exit 0]
    ask neighbors with [pcolor = white or pcolor = cyan or pcolor = green]
    [set closeness-to-main-exit 1
    set pcolor orange] 
  ]
  
  let counter 1
  while [counter < 250] 
  [
    ask patches with [closeness-to-main-exit = counter]
    [ask neighbors with [pcolor = white or pcolor = cyan or pcolor = green] 
      [
      if counter + 1 > closeness-to-main-exit 
        [
        set closeness-to-main-exit counter + 1
        set pcolor orange
      ]]]
   set counter counter + 1 
  ]
  ask patches with [cyan? = true] [set pcolor cyan]
  ask patches with [white? = true] [set pcolor white]
  ask patches with [green? = true] [set pcolor green]
  ask patches [ if any? neighbors with [pcolor = black] [set closeness-to-main-exit closeness-to-main-exit + 1]]
    
end
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

to determine-response-time
  if studying? = true [set response-timer random average-response-time * 2 * 1.5]
  if asking-at-desk? = true [ set response-timer random average-response-time * 2 / 2]
  if studying? = false and asking-at-desk? = false [set response-timer random average-response-time * 2]
  set response-time-calculated? true

end

to evacuate
  ifelse knows-all-exits? = true
  [
    if any? patches in-radius 2 with [evac-path? = true]
    [ 
      if min-one-of patches in-radius 2 with [count visitors-here < max-turtles-per-patch and evac-path? = true] [closeness-to-exit] != nobody
      [
      face min-one-of patches in-radius 2 with [count visitors-here < max-turtles-per-patch and evac-path? = true] [closeness-to-exit]
      fd running-speed
      ]
      
    ]
  ]
  [
    if any? patches in-radius 2 with [evac-path? = true]
    [
     if min-one-of patches in-radius 2 with [count visitors-here < max-turtles-per-patch and evac-path? = true] [closeness-to-main-exit] != nobody
     [ 
      face min-one-of patches in-radius 2 with [count visitors-here < max-turtles-per-patch and evac-path? = true] [closeness-to-main-exit]
      fd running-speed
      ]
    ]
  ]
   
end

to guide-visitors-to-exit 
  ask visitors in-radius alerting-range
  [set knows-all-exits? true
   set response-timer 0]
end


